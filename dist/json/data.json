[
	{
	   "idx" : "4",
	   "title" : "투두리스트 만들기 1편",
	   "content" : "<p>몇달 전만해도 사실 기능 구현 하나 쉽지 않았었다.<p><br><p>더구나 독학러였기에 삽질이 아니면 내것이 아니다! 라는 포부가 나도 모르게 새겨져 있었다.</p><br><p>문득 나의 위치가 궁금해졌고 만만하게 보였던 투두리스트를 만들어보기로 결심했다.</p><br><p>먼저 디자인을 구성해보았다</p><br><img src='../images/temp/to1.png' class='todoimg'><br><p>1.Add Card를 누르면 왼쪽 카드가 생성</p><br><p>2.카드 생성시 해당 카드 넘버, 타이틀, 투두리스트 담을 박스, 날짜가 복제된다.</p><br><p>3.카드 안에 Add ToDo에 todo를 적고 제출시 li태그가 생성되며 정렬된다.</p><br><br><p class='st'>1.Add Card를 누르면 왼쪽 카드가 생성</p><p>HTML 구조는 Add Card 버튼은 고정으로 label 태그에 감싼 뒤 체크 시에는 input(타이틀 담는 곳)이 보이도록 작성했다.</p><br><img src='../images/temp/to2.png' class='todoimg'><br><p>다음 카드 생성을 위해 <code>submit</code>이 될 때 <code>event.preventDefault</code>로 새로고침을 막아주었다.</p><br><img src='../images/temp/to3.png' class='todoimg'><br><p>다음 여러 정보들이 담겨야해서 새로운 오브젝트를 만들어 push로 배열속에 넣었고 카드생성 함수를 만들어주었다.</p><br><img src='../images/temp/to5.png' class='todoimg'><br><p>카드 생성 함수를 처음엔 map 함수로 돌렸다</p><br><p>그랬더니 반복이 되는 버그를 발견했고, 최초 한개씩만 만들면 되기에 map이 아니라 그냥 함수로 넘겨줘야했다.</p><img src='../images/temp/to4.png' class='todoimg'><br><p>넘겨받은 데이터들은 저장, 생성 그리고 지우기로 나눴다</p><br><img src='../images/temp/to7.png' class='todoimg'><br><p>저장은 setItem의 JSON.stringfy() 메소드로 문자열을 오브젝트형식 값으로 넣어주었다.</p><br><img src='../images/temp/to8.png' class='todoimg'><br><p>다음 생성은 1차.crateElement로 생성 2차.cloneNode()로 복제 3차.appendChild로 상속시켰다. </p><br><br><br><p>중간에 form 안에 form 태그를 한번 더 생성한 바람에 무한콜백함수지옥을 맛보았다. ㅎ</p><br><img src='../images/temp/to9.png' class='todoimg'><br><p>문제를 발견했다. 엔터를 눌러도 다음 카드 생성이 되지 않는것이였다.</p><br><p>처음엔 return 문제인건가 싶어서 실행함수 쪽에 console을 찍어보았는데 다음 실행이 되지 않는 것을 발견했다</p><br><img src='../images/temp/to10.png' class='todoimg'><br><p>다음 실행이 되지 않는걸 보니 input 쪽 문제가 확실했지만 찾을수가 없었다... 알고보니 카드 안에 들어가는 input에 required를 적는바람에 필수로 적어야하니 다음 실행을 하지 않는것이였다.</p><br><p>그리고선 잘 되가다가 안에 있는 함수를 밖으로도 될수있게 하는방법인 전역함수를 작성해서 카드 안에 있는 input에도 똑같은 방법으로 생성될수 있게 밖에 있는 함수들을 재활용해야했는데 이걸 못적겠더라 ㅠ ㅠ</p><br>두번째 문제는 input의 포커스 부분을 고쳐야하는데 엄두가 나질 않았다.. 원인은 아는데... 고칠수가 없어요.......흐앙<br><p>이 부분은 오만가지 생각 끝에 좀 더 공부한 뒤에 차근차근 업데이트 하기로 결정했다.</p><br><p>다음 스토리지에 저장된 걸 삭제, 새로고침되도 기록되어있는 부분을 작성했다.</p><br><br><img src='../images/temp/to11.png' class='todoimg'><img src='../images/temp/to12.png' class='todoimg'><br><br><p>당장에 사용할수 있는 투두리스트는 완성되지 못했지만, 이만치 성장한것에 자랑스럽고 또 더 열심히 해야겠다..!</p><img src='../images/temp/to13.png' class='todoimg'><p>귀여운 나의 지못미투두리스트..</p><br><br><p>더 공부해서 얼른 완성시켜주께 나의 뚜두..🫠</p>",
	   "wname" : "DAVINCI",
	   "hit" : 10,
	   "wdate" : "2023-06-22"
	},
	{
	   "idx" : "3",
	   "title" : "실무에 자주 이용하는 input collection",
	   "content" : "<p class='txt'>실무에 자주 이용하는 input collection이다.<br>1년동안 에이전시에서 근무하면서 스무개가 넘는 프로젝트와 모두 런칭을 해보면서 가장 많이 구현했던 인풋 태그의 패턴을 추려보았다.<br>1.비밀번호 입력<br>2.휴대폰번호 기입<br>3.약관동의 체크</p><div class='box'><form><div class='input-div'><div class='comment-notice'><p class='p'>.</p><p class='p'>.</p><p class='p'>.</p><p class='c'>🎈Let's Do It❗</p><div class='pw-custom-wrap'><div class='txt-wrap'><p class='title'>비밀번호 6자리를 입력해주세요.</p><p class='sub-t'>※숫자만 가능</p></div><div class='input-line for-pw'><input type='password' placeholder='비밀번호 입력' id='pw-chk' class='required input only-num' maxlength='6'><i class='pw-i'></i></div><ul class='process-pw'><li><i></i></li><li><i></i></li><li><i></i></li><li><i></i></li><li><i></i></li><li><i></i></li></ul></div><div class='content-txt-wrap inner-content'><h4 class='label'>🔎KEY POINT.</h4><p class='txt'>1.비밀번호는 6자로 제한되어 있다.</p><p class='txt'>2.숫자 외 키보드 이벤트 발생 시 잘못된 접근인 것.</p><p class='txt'>3.아이콘에 맞게 input의 type이 text/password가 바뀌어야한다.</p><p class='txt'>4.사용자가 현재 치고있는 과정을 보여주기 위해 동작에 맞추어 동그라미 아이콘의 움직임을 적절히 넣었다.</p></div></div><div class='comment-notice'><p class='p'>.</p><p class='p'>.</p><p class='p'>.</p><p class='c'>🎈Let's Do It❗</p><div class='add-wrap'><div class='txt-wrap'><p class='title'>휴대폰 번호를 적어주세요.</p><p class='title'>※단순 체험이오니 정보는 저장되지 않습니다.</p></div><div class='input-line max-inp3'><input type='text' class='input input-number only-num' maxlength='3'><span>-</span><input type='text' class='input input-number only-num' maxlength='4'><span>-</span><input type='password' class='input input-number only-num' maxlength='4'></div></div><div class='content-txt-wrap inner-content'><h4 class='label'>🔎KEY POINT.</h4><p class='txt'>1.maxlength가 꽉차면 다음 input으로 자동으로 넘어야한다.</p><p class='txt'>2.숫자 외 키보드 이벤트 발생 시 잘못된 접근인 것.</p></div></div><div class='comment-notice'><p class='p'>.</p><p class='p'>.</p><p class='p'>.</p><p class='c'>🎈Let's Do It❗</p><div class='agree-wrap'><label for='chk1' class='checkbox'><input type='checkbox' id='chk1' class='chks' checked><i class='icon'></i><p class='txt'>[필수] 회원 약관 및 동의사항</p></label><label for='chk2' class='checkbox'><input type='checkbox' class='chks' id='chk2'><i class='icon'></i><p class='txt'>[선택] 맞춤형 서비스 제공 개인정보 처리동의</p></label><label for='all-chk' class='checkbox'><input type='checkbox' class='all-chk' id='all-chk'><i class='icon'></i><p class='txt'>전체동의</p></label></div><div class='content-txt-wrap inner-content'><h4 class='label'>🔎KEY POINT.</h4><p class='txt'>1.전체동의가 체크 선택/해제 여부에 따라 작동이 된다.</p></div></div></div></form></div>",
	   "wname" : "DAVINCI",
	   "hit" : 10,
	   "wdate" : "2023-06-21"
	},
	{
	   "idx" : "2",
	   "title" : "Grid layout의 minmax()함수, grid-template-areas 활용하기",
	   "content" : "<p>1.minmax() 함수</p><br><p> grid의 minmax는 min(최솟값)과 max(최댓값)을 정해두어 colums과 row의 트랙의 비율에 맞게,<br>유연하게 auto로 바뀐다. </p><p id='example'>example</p> <div class='grid-layer'> <div>1</div><div>2</div><div>3</div></div><pre><code class='lang-js'><span class='hljs-built_in'>display</span>:grid;<br>grid-<span class='hljs-keyword'>template</span>-columns: repeat(<span class='hljs-number'>3</span>, minmax(<span class='hljs-number'>30</span>px, <span class='hljs-keyword'>auto</span>));<br>grid-<span class='hljs-keyword'>template</span>-rows: minmax(<span class='hljs-number'>150</span>px, <span class='hljs-keyword'>auto</span>) repeat(<span class='hljs-number'>3</span>, <span class='hljs-number'>1</span>fr);</code></pre> <p>minmax(최솟값, 최댓값)으로 적어주면 된다.</p><img src='../images/temp/ex.png' style='width: 100%;'><br><br><br><p>2.grid-template-areas</p><br><p>다음 <code>grid-template-areas</code>를 활용해보자!</p><p id='example'>example</p><div class='grid-container'><div class='header'>Header</div><div class='nav'>Nav</div><div class='section'>Section</div><div class='aside'>Aside-right</div><div class='footer'>Footer</div></div><pre><code class='lang-js'>.grid-container {<br><span class='hljs-symbol'>padding:</span><span class='hljs-number'>10</span>px<span class='hljs-comment'>;</span><br><span class='hljs-symbol'>    display:</span> grid<span class='hljs-comment'>;</span><br>grid-gap: <span class='hljs-number'>5</span>px<span class='hljs-comment'>;</span><br>grid-template-areas:<br><span class='hljs-string'>'header header header'</span><br><span class='hljs-string'>'nav section aside'</span><br><span class='hljs-string'>'footer footer footer'</span><span class='hljs-comment'>;</span><br>.header {<br>grid-area: header<span class='hljs-comment'>;</span><br>}<span class='hljs-comment'>;</span><br>.nav {<br>grid-area: nav<span class='hljs-comment'>;</span><br>}<br><span class='hljs-meta'>.section</span> {<br>grid-area: section<span class='hljs-comment'>;</span><br>}<br>.footer {<br>grid-area: footer<span class='hljs-comment'>;</span><br>}<br>> <span class='hljs-keyword'>div </span>{<br><span class='hljs-keyword'>background-color: </span>pink<span class='hljs-comment'>;</span><br>font-size: clamp(<span class='hljs-number'>1</span>rem, <span class='hljs-number'>2</span>.<span class='hljs-number'>5</span>vw, <span class='hljs-number'>2</span>rem)<span class='hljs-comment'>;</span><br>}<br>}<span class='hljs-comment'>;</span><br></code></pre> <br><span class='hljs-keyword'>step</span> :<br>*해당 콘텐츠에 역할에 맞는 네임을 정한다.<br>*<span class='hljs-built_in'>grid</span>-template-areas 로 각 자리에 맞게 정렬한다.<br>*해당 class name에 맞춰놓은 콘텐츠 네임을 <span class='hljs-built_in'>grid</span>-area 로 지정해준다.</code></pre>",
	   "wname" : "DAVINCI",
	   "hit" : 10,
	   "wdate" : "2023-06-21"
	},
	{
	   "idx" : "1",
	   "title" : "Grid layout 기초 이해하기",
	   "content" : "<p>그리드 레이아웃은 CSS 속성을 간결하게 작성할수 있는 단축 속성이며 지금까지 도입된 CSS 모듈 중 가장 강력한 모듈이다.<br><br><code>flex</code>는 1차원 구조고 <code>Grid</code>는 좀더 복잡한 2차원 구조로 되있는 만큼 복잡한 레이아웃일수록 굉장히 쉽게 컨트롤이 가능하다.<br><br><code>그리드 레이아웃</code>은 <code>세로 열</code>과 <code>가로 행</code>을 기준으로 정렬하며, 자동으로 최대치까지 채워지는 기본적으로 <code>auto</code> 시스템이다.<br><br><code>flex</code>로 자식요소들을 <code>column</code>과 <code>row</code>로 <code>size</code>를 설정한다면,<br><code>grid</code>는 자식요소들을 <code>grid-template-columns</code>(가로 행), <code>grid-template-rows</code>(세로 열)로 설정한 다음,<br>그리드의 하위 요소를 <code>grid-column</code>와 <code>grid-row</code>로 배치해야 한다.<br><br>단 2줄만으로 재정렬할수 있다는 뜻이다.<br><br>아래의 여러 예시들로 이해를 도와본다.<br>(먼저 보고 이해를 한 다음에 보지말고 써보면 확실하게 체화가 된다.)</p><br><br><p id='example'>example</p><br><div class='grid-wrap type1'><div class='box'>1</div><div class='box'>2</div><div class='box'>3</div><div class='box'>4</div><div class='box'>5</div><div class='box'>6</div><div class='box'>7</div><div class='box'>8</div><div class='box'>9</div></div><br><p>부모 요소에</p><pre><code class='lang-js'><span class='hljs-built_in'>display</span>:<span class='hljs-built_in'>grid</span>;</code></pre><p>를 넣고</p><pre><code class='lang-js'>grid-template-columns:<span class='hljs-number'>1f</span>r <span class='hljs-number'>1f</span>r <span class='hljs-number'>1f</span>r;<br>grid-template-rows:<span class='hljs-number'>1f</span>r <span class='hljs-number'>1f</span>r <span class='hljs-number'>1f</span>r;</code></pre><p><code>fr</code>은 컨테이너의 여유공간을 비율로 1:1:1로 나눠 설정한다.</p><br><p>같은 예시로 <code>repeat()</code>함수도 있다.</p><pre><code class='lang-js'><span class='hljs-built_in'>grid</span>-template-<span class='hljs-built_in'>columns</span>: repeat(<span class='hljs-number'>3</span>, 1fr);<br><span class='hljs-built_in'>grid</span>-template-rows: repeat(<span class='hljs-number'>3</span>, 1fr);</code></pre><p>1:1:1 비율로 3번 반복한다.</p><br><br><p id='example'>example</p><br><div class='grid-wrap type3'> <div class='box'>1</div><div class='box'>2</div><div class='box'>3</div><div class='box'>4</div><div class='box'>5</div><div class='box'>6</div><div class='box'>7</div><div class='box'>8</div></div><br><pre><code class='lang-js'><span class='hljs-built_in'>grid</span>-template-<span class='hljs-built_in'>columns</span>:200px 1fr;<br><span class='hljs-built_in'>grid</span>-template-rows:200px 1fr;</code></pre><p>직역하자면, 가로 2줄 세로 2줄로 정렬하고 200px씩 반복해줘. 이다!</p><br><p id='example'>example</p><br><div class='grid-wrap type4'> <div class='box'>1</div><div class='box'>2</div><div class='box'>3</div><div class='box'>4</div><div class='box'>5</div><div class='box'>6</div><div class='box'>7</div><div class='box'>8</div><div class='box'>9</div></div><br><pre><code class='lang-js'>grid-<span class='hljs-keyword'>template</span>-columns:<span class='hljs-keyword'>auto</span> <span class='hljs-number'>200</span>px <span class='hljs-number'>100</span>px;<br>grid-<span class='hljs-keyword'>template</span>-rows:<span class='hljs-number'>100</span>px <span class='hljs-number'>200</span>px <span class='hljs-keyword'>auto</span>;</code></pre><p><code>grid</code>는 부모 크기만큼 최대치까지 꽉 채워주며 <code>auto</code>를 사용하면 좀더 간편하게 사용할수 있다.</p>",
	   "wname" : "DAVINCI",
	   "hit" : 10,
	   "wdate" : "2023-06-21"
	}
 ]